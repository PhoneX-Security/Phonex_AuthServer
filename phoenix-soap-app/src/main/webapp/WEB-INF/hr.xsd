<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright 2007 the original author or authors.
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~      http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:hr="http://phoenix.com/hr/schemas"
           elementFormDefault="qualified"
           targetNamespace="http://phoenix.com/hr/schemas">
    
    <xs:simpleType name="alias">
        <xs:annotation>
            <xs:documentation>
                User alias type
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1"/>
            <xs:maxLength value="64"/>
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9\-\._@]*"/> 
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="groupID">
         <xs:annotation>
            <xs:documentation>
                Simple group ID type - unsigned int
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:unsignedInt"/>
    </xs:simpleType>
    
    <xs:simpleType name="group">
        <xs:annotation>
            <xs:documentation>
                Group ID - can have subgroups.
                Example: company.managers.high
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"> 
            <xs:pattern value="[^\.][a-zA-Z0-9_\-\.]+"/> 
        </xs:restriction> 
    </xs:simpleType>
    
    <xs:complexType name="groupRecord">
        <xs:annotation>
            <xs:documentation>
                Group record (in contactlist element for example).
                This group is intended to be loaded from database.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="groupId" type="hr:groupID" minOccurs="1" maxOccurs="1"/>
            <xs:element name="groupName" type="hr:group" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>
   
    <xs:simpleType name="enabledDisabled">
        <xs:annotation>
            <xs:documentation>
                Enabled or disabled state
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="enabled"/>
            <xs:enumeration value="disabled"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="trueFalse">
        <xs:annotation>
            <xs:documentation>
                Boolean
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="true"/>
            <xs:enumeration value="false"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="trueFalseNA">
        <xs:annotation>
            <xs:documentation>
                Boolean with null
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="true"/>
            <xs:enumeration value="false"/>
            <xs:enumeration value="na"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="whitelistAction">
        <xs:annotation>
            <xs:documentation>
                White list action type - inside whitelist change request
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="add"/>
            <xs:enumeration value="remove"/>
            <xs:enumeration value="enable"/>
            <xs:enumeration value="disable"/>
            <xs:enumeration value="nothing"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="contactlistAction">
        <xs:annotation>
            <xs:documentation>
                Action performed on contact list item
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="add"/>
            <xs:enumeration value="remove"/>
            <xs:enumeration value="enable"/>
            <xs:enumeration value="disable"/>
            <xs:enumeration value="nothing"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="userSIP">
        <xs:annotation>
            <xs:documentation>
                User's SIP address type
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"> 
            <xs:pattern value="[^@]+@[^\.]+\..+"/> 
        </xs:restriction> 
    </xs:simpleType>
    
    <xs:simpleType name="userID">
        <xs:annotation>
            <xs:documentation>
                Simple user ID type - unsigned int
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:unsignedInt"/>
    </xs:simpleType>
    
    <xs:simpleType name="userPresenceStatus">
        <xs:annotation>
            <xs:documentation>
                User presence type - presence in contact list
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="online"/>
            <xs:enumeration value="offline"/>
            <xs:enumeration value="away"/>
            <xs:enumeration value="dnd"/>
            <xs:enumeration value="invisible"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="userWhitelistStatus">
        <xs:annotation>
            <xs:documentation>
                User presence in whitelist type
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="in"/>
            <xs:enumeration value="notin"/>
            <xs:enumeration value="disabled"/> 
            <xs:enumeration value="noclue"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="whitelistReturn">
        <xs:annotation>
            <xs:documentation>
                Whitelist request response type - integer
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:int"/>
    </xs:simpleType>
    
    <xs:complexType name="contactlistReturn">
        <xs:annotation>
            <xs:documentation>
                Contactlist request response type - integer
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="targetUser" type="hr:userSIP"/>
            <xs:element name="user" type="hr:userSIP"/>
            <xs:element name="resultCode" type="xs:int"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="aliasList">
        <xs:annotation>
            <xs:documentation>
                List of aliases
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="alias" type="hr:alias" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="sipList">
        <xs:annotation>
            <xs:documentation>
                List of SIP addresses
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="user" type="hr:userSIP" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="userIdentifier">
        <xs:annotation>
            <xs:documentation>
                User identifier for requests.
                If ID is present, it means that user is INTERNAL only
                if SIP ID is present, it means that user can be INTERNAL/EXTERNAL
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
               <xs:element name="userSIP" type="hr:userSIP"/>
               <xs:element name="userID" type="hr:userID"/>
            </xs:choice>
    </xs:complexType>
    
    <xs:complexType name="groupIdentifier">
        <xs:annotation>
            <xs:documentation>
                Group identifier for request - can be group id or group name
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
               <xs:element name="groupID" type="hr:groupID"/>
               <xs:element name="groupName" type="hr:group"/>
            </xs:choice>
    </xs:complexType>
    
    <xs:complexType name="whitelistRequestElement">
        <xs:annotation>
            <xs:documentation>
                Whitelist request element, inside whitelist request message
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="targetUser" type="hr:userSIP"/>
            <xs:element name="user" type="hr:userIdentifier"/>
            <xs:element name="action" type="hr:whitelistAction"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="contactlistChangeRequestElement">
        <xs:annotation>
            <xs:documentation>
                Contactlist request element, inside contactlist change request message.
                
                Since Whitelist is subset of contactlist, with this request user
                can change whitelist settings also. 
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="targetUser" type="hr:userSIP"/>
            <xs:element name="user" type="hr:userIdentifier"/>
            <xs:element name="action" type="hr:contactlistAction"/>
            <xs:element name="whitelistAction" type="hr:whitelistAction"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="contactListElement">
        <xs:annotation>
            <xs:documentation>
                One element in contactlist response
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="owner" type="hr:userSIP"/>
            <xs:element name="userid" type="hr:userID"/>
            <xs:element name="alias" type="hr:alias"/>
            <xs:element name="usersip" type="hr:userSIP"/>
            <xs:element name="presenceStatus" type="hr:userPresenceStatus"/>
            <xs:element name="contactlistStatus" type="hr:enabledDisabled"/>
            <xs:element name="whitelistStatus" type="hr:userWhitelistStatus"/>
            <xs:element name="hideInContactList" type="xs:boolean"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="whitelistElement">
        <xs:annotation>
            <xs:documentation>
                One element in whitelist response
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="userid" type="hr:userID"/>
            <xs:element name="usersip" type="hr:userSIP"/>
            <xs:element name="whitelistStatus" type="hr:userWhitelistStatus"/>
        </xs:sequence>
    </xs:complexType>
    
    <!--
        ~ Elements definition for messages
    -->
    <xs:element name="whitelistRequest">
        <xs:annotation>
            <xs:documentation>
                Whitelist change request - add/remove whitelist multiple entries
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="whitelistrequestElement" 
                            type="hr:whitelistRequestElement" 
                            minOccurs="1" 
                            maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
        <xs:unique name="whitelistrequestElement">
            <xs:selector xpath="whitelistrequestElement"/>
            <xs:field xpath="@user"/>
        </xs:unique>
    </xs:element>
    
    <xs:element name="whitelistResponse">
        <xs:annotation>
            <xs:documentation>
                Whitelist change request response
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="return" 
                            type="hr:whitelistReturn" 
                            minOccurs="1" 
                            maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="contactlistChangeRequest">
        <xs:annotation>
            <xs:documentation>
                Contactlist change request - add/remove multiple contactlist entries
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="contactlistChangeRequestElement" 
                            type="hr:contactlistChangeRequestElement" 
                            minOccurs="1"
                            maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
        <xs:unique name="uniqueAlias">
            <xs:selector xpath="contactlistChangeRequestElement"/>
            <xs:field xpath="@user"/>
        </xs:unique>
    </xs:element>
    
    <xs:element name="contactlistChangeResponse">
        <xs:annotation>
            <xs:documentation>
                Contactlist change request response
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="return" 
                            type="hr:contactlistReturn" 
                            minOccurs="1"
                            maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="contactlistGetRequest">
        <xs:annotation>
            <xs:documentation>
                Simple get contactlist request, can request whole contact list
                or only portion of it specifying list of aliases to retrieve
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="targetUser" type="hr:userSIP"/>
                <xs:element name="users" type="hr:userIdentifier" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>   
        </xs:complexType>
        <xs:unique name="uniqueAliasClistSchema">
            <xs:selector xpath="user"/>
            <xs:field xpath="@user"/>
        </xs:unique>
    </xs:element>

    <xs:element name="contactlistGetResponse">
        <xs:annotation>
            <xs:documentation>
                Contact list get response
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="contactlistEntry" type="hr:contactListElement" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>   
        </xs:complexType>
        <xs:unique name="contactlistEntry">
            <xs:selector xpath="contactlistEntry"/>
            <xs:field xpath="@user"/>
        </xs:unique>
    </xs:element>
    
    <xs:element name="whitelistGetRequest">
        <xs:annotation>
            <xs:documentation>
                Fetches whole whitelist
            </xs:documentation>
        </xs:annotation>
        <xs:complexType/> 
    </xs:element>
    
    <xs:element name="whitelistGetResponse">
        <xs:annotation>
            <xs:documentation>
                Whitelist response - contains full whitelist
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="return" 
                            type="hr:whitelistElement" 
                            minOccurs="0" 
                            maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:simpleType name="binaryPayload">
        <xs:annotation>
            <xs:documentation>
                Binary Base64 encoded payload
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:base64Binary"/>
    </xs:simpleType>
    
    <xs:element name="getCertificateRequest">
        <xs:annotation>
            <xs:documentation>
                Get certificate request for given users
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="element" type="hr:certificateRequestElement" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>   
        </xs:complexType>
        <xs:unique name="uniqueCertUlistSchema">
            <xs:selector xpath="user"/>
            <xs:field xpath="@user"/>
        </xs:unique>
    </xs:element>
    
    <xs:simpleType name="certificateStatus">
        <xs:annotation>
            <xs:documentation>
                State available for certificate response
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="ok"/>
            <xs:enumeration value="invalid"/>
            <xs:enumeration value="revoked"/>
            <xs:enumeration value="forbidden"/>
            <xs:enumeration value="missing"/>
            <xs:enumeration value="nouser"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:complexType name="certificateRequestElement">
        <xs:annotation>
            <xs:documentation>
                One element in certificate request. Contains user to retrieve 
                certificate for. 
                
                User can also provide hash for certificate that owns and assumes 
                it is valid hash for certificate. In this case we are not returning
                binary certificate, we are just confirming its validity if it is true.
                If provided certificate is invalid, INVALID is returned and if user
                has some new certificate valid, it is returned.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="user" type="hr:userSIP"/>
            <xs:element name="certificateHash" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="certificateWrapper">
        <xs:annotation>
            <xs:documentation>
                One certificate for particular user
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="user" type="hr:userSIP"/>
            <xs:element name="certificate" type="hr:binaryPayload"/>
            <xs:element name="status" type="hr:certificateStatus"/>
            <xs:element name="providedCertStatus" type="hr:certificateStatus"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:element name="getCertificateResponse">
        <xs:annotation>
            <xs:documentation>
                Response contains X.509 certificates
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="return" 
                            type="hr:certificateWrapper" 
                            minOccurs="0" 
                            maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="signCertificateRequest">
        <xs:annotation>
            <xs:documentation>
                Request for signing certificate by server CA - be very carefull!
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="user" type="hr:userSIP"/>
                <xs:element name="usrToken" type="xs:string"/>
                <xs:element name="serverToken" type="xs:string"/>
                <xs:element name="authHash" type="xs:string"/>
                <xs:element name="CSR" type="hr:binaryPayload"/>
            </xs:sequence>   
        </xs:complexType>
    </xs:element>
    
    <xs:element name="signCertificateResponse">
        <xs:annotation>
            <xs:documentation>
                Response contains X.509 certificates
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="certificate" 
                            type="hr:certificateWrapper" 
                            minOccurs="1" 
                            maxOccurs="1"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="getOneTimeTokenRequest">
        <xs:annotation>
            <xs:documentation>
                Request for signing certificate by server CA - be very carefull!
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="user" type="hr:userSIP"/>
                <xs:element name="userToken" type="xs:string"/>
                <xs:element name="type" type="xs:int"/>
            </xs:sequence>   
        </xs:complexType>
    </xs:element>
    
    <xs:element name="getOneTimeTokenResponse">
        <xs:annotation>
            <xs:documentation>
                Request for signing certificate by server CA - be very carefull!
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="user" type="hr:userSIP"/>
                <xs:element name="userToken" type="xs:string"/>
                <xs:element name="serverToken" type="xs:string"/>
                <xs:element name="notValidAfter" type="xs:dateTime"/>
            </xs:sequence>   
        </xs:complexType>
    </xs:element>
    
    <xs:element name="passwordChangeRequest">
        <xs:annotation>
            <xs:documentation>
                Request to change password to provided value. 
                User can also change password for different user - see targetUser field.
                Password is encrypted like CSR is, but in base64, 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="targetUser" type="hr:userSIP"/>
                <xs:element name="usrToken" type="xs:string"/>
                <xs:element name="serverToken" type="xs:string"/>
                <xs:element name="authHash" type="xs:string"/>
                <xs:element name="newHA1" type="hr:binaryPayload"/>
                <xs:element name="newHA1b" type="hr:binaryPayload"/>
            </xs:sequence>   
        </xs:complexType>
    </xs:element>
    
    <xs:element name="passwordChangeResponse">
        <xs:annotation>
            <xs:documentation>
                Simple response for password change request
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="targetUser" type="hr:userSIP"/>
                <xs:element name="result" type="xs:int"/>
                <xs:element name="reason" type="xs:string"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="authCheckRequest">
        <xs:annotation>
            <xs:documentation>
                Check user authentication with password and additionally with certificate
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="targetUser" type="hr:userSIP"/>
                <xs:element name="authHash" type="xs:string"/>
            </xs:sequence>   
        </xs:complexType>
    </xs:element>
    
    <xs:element name="authCheckResponse">
        <xs:annotation>
            <xs:documentation>
                Simple response for auth check procedure
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="authHashValid" type="hr:trueFalse"/>
                <xs:element name="certValid" type="hr:trueFalseNA"/>
                <xs:element name="forcePasswordChange" type="hr:trueFalse"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="binaryMessageUpload">
        <xs:annotation>
            <xs:documentation>
                Type for uploading a binary message to server
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="destination" type="hr:userIdentifier" />
                <xs:element name="payload" type="hr:binaryPayload" />
            </xs:sequence>   
        </xs:complexType>
    </xs:element>
    
    <xs:element name="GetMessages">
        <xs:annotation>
            <xs:documentation>
                Fetches binary messages from server
            </xs:documentation>
        </xs:annotation>
        <xs:complexType/> 
    </xs:element>
    
    <xs:complexType name="messageFromUser">
        <xs:annotation>
            <xs:documentation>
                One message from user
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="src" type="hr:userIdentifier"/>
            <xs:element name="payload" type="hr:binaryPayload"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:element name="binaryMessagesResponse">
        <xs:annotation>
            <xs:documentation>
                Response from server - returns binary messages stored on server
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="msg" type="hr:messageFromUser" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence> 
        </xs:complexType>
    </xs:element>
    
    <xs:element name="HolidayResponse2" nillable="true" type="xs:string"/>
    <xs:element name="HolidayResponse" type="xs:string" />
    <xs:element name="HolidayRequest">
        <xs:complexType>
            <xs:all>
                <xs:element name="Holiday" type="hr:HolidayType"/>
                <xs:element name="Employee" type="hr:EmployeeType"/>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="HolidayType">
        <xs:sequence>
            <xs:element name="StartDate" type="xs:date"/>
            <xs:element name="EndDate" type="xs:date"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="EmployeeType">
        <xs:sequence>
            <xs:element name="Number" type="xs:integer"/>
            <xs:element name="FirstName" type="xs:string"/>
            <xs:element name="LastName" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>